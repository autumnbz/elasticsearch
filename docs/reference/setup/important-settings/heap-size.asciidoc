[[heap-size]]
=== 设置堆大小

默认情况下，Elasticsearch 通知 JVM 使用最小和最大值均为 1 GB 的堆。当转到生产时，为了确保 Elasticsearch 有足够的可用堆，因此配置堆大小非常重要。

Elasticsearch 通过指定设置 <<jvm-options,jvm.options>> 内的 `Xms` （最小堆大小）和 `Xmx` （最大堆大小）分配整个堆。

这些设置值取决于你的服务器 RAM 可用量。好的经验规则是：

* 设置最小堆大小（`Xms`）等于最大堆大小（`Xmx`）。

* Elasticsearch 可用的堆越多，就有更多内存用于缓存。但请注意，堆太大会让垃圾收集暂停时间更长。

* `Xmx` 不要设置大于物理 RAM 的 50%，这是为了确保有足够物理 RAM 用于内核文件系统缓存。

* 不要将 `Xmx` 设置为 JVM 压缩对象指针（压缩的 oops）临界点以上；确切的临界值有所不同，但接近 32 GB。
  你可以通过在日志中查找以下行来验证是否在限制以下：
+
    heap size [1.9gb], compressed ordinary object pointers [true]

* 更好的是，尽量保持低于零基压缩阈值；准确的临界值有所不同，但在大多数系统上 26 GB 是安全的，不过
  在某些系统上可达 30 GB。你可以通过在启动 Elasticsearch 时配置 `-XX:+UnlockDiagnosticVMOptions -XX:+PrintCompressedOopsMode` JVM 选项
  并查找以下行来验证是否受限：
+
--
    heap address: 0x000000011be00000, size: 27648 MB, zero based Compressed Oops

以下显示启用零基压缩：

    heap address: 0x0000000118400000, size: 28672 MB, Compressed Oops with base: 0x00000001183ff000
--

以下是通过 jvm.options 文件设置堆大小的一些例子：

[source,txt]
------------------
-Xms2g <1>
-Xmx2g <2>
------------------
<1> 设置最小堆为 2g。
<2> 设置最大堆为 2g。

通过环境变量设置堆大小同样可行。这可以通过注释 <<jvm-options,`jvm.options`>> 文件中的 `Xms` 和 `Xmx`，并在 `ES_JAVA_OPTS` 中设置这些值：

[source,sh]
------------------
ES_JAVA_OPTS="-Xms2g -Xmx2g" ./bin/elasticsearch <1>
ES_JAVA_OPTS="-Xms4000m -Xmx4000m" ./bin/elasticsearch <2>
------------------
<1> 设置最小最大堆为 2 GB。
<2> 设置最小最大堆为 4000 MB。

NOTE: 为 <<windows-service,Windows 服务>> 配置堆与上文方式不同。 Windows 服务初始值可以通过上文方式配置，但在服务安装完成后会有所不同。
更多细节请查看 <<windows-service,Windows 服务文档>> 。
