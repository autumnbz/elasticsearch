[[docs-delete]]
== delete API

delete API 可以删除指定索引 id 的 JSON 结构文档。下例删除 twitter 索引 _doc 类型 id 为 1 的 JSON 文档：

[source,js]
--------------------------------------------------
DELETE /twitter/_doc/1
--------------------------------------------------
// CONSOLE
// TEST[setup:twitter]

上文 delete 操作结果是：

[source,js]
--------------------------------------------------
{
    "_shards" : {
        "total" : 2,
        "failed" : 0,
        "successful" : 2
    },
    "_index" : "twitter",
    "_type" : "_doc",
    "_id" : "1",
    "_version" : 2,
    "_primary_term": 1,
    "_seq_no": 5,
    "result": "deleted"
}
--------------------------------------------------
// TESTRESPONSE[s/"successful" : 2/"successful" : 1/]
// TESTRESPONSE[s/"_primary_term" : 1/"_primary_term" : $body._primary_term/]
// TESTRESPONSE[s/"_seq_no" : 5/"_seq_no" : $body._seq_no/]

[float]
[[delete-versioning]]
=== 版本

索引的每个文档都被版本标记。当删除文档时，可以指定 `version` 以确保我们试图删除的文档确实被删了， 它在此期间没有改变。
每次在文档上执行写操作时，包括删除，都会使版本号增加。

[float]
[[delete-routing]]
=== 路由

当索引时使用了控制路由功能，为了删除文档，需要提供路由值。例如：

////
使用路由删除的例子

[source,js]
--------------------------------------------------
PUT /twitter/_doc/1?routing=kimchy
{
    "test": "test"
}
--------------------------------------------------
// CONSOLE
////


[source,js]
--------------------------------------------------
DELETE /twitter/_doc/1?routing=kimchy
--------------------------------------------------
// CONSOLE
// TEST[continued]

上文会删除 id 为 1 的 tweet，但是基于 user 路由的。
注意，如果删除没有正确路由，将造成文档无法被删除。

当 `_routing` 映射设置为 `required` 且没有指定路由值，delete api 会抛出 `RoutingMissingException` 并拒绝请求。

[float]
[[delete-index-creation]]
=== 自动创建索引

如果使用了 <<docs-index_,external versioning variant>> ，
删除操作会在索引未创建前（查看 <<indices-create-index,create index API>> 手动创建索引）自动创建索引，
同时也会在类型未创建前自动创建动态类型映射（查看 <<indices-put-mapping,put mapping>> 手动创建类型映射）。

[float]
[[delete-distributed]]
=== Distributed

删除操作将 hash 至指定分片 id。然后它直接跳转至该 id 组 主分片，同时复制（如果需要）请求至 id 组内的分片副本。

[float]
[[delete-wait-for-active-shards]]
=== 等待活动分片

当使用删除请求时，你可以设置 `wait_for_active_shards` 参数来要求开始处理删除请求前的最少活动分片。
更多细节和例子请参考 <<index-wait-for-active-shards,here>> 。

[float]
[[delete-refresh]]
=== Refresh

控制该请求做的改变对搜索何时可见。详见 <<docs-refresh>> 。


[float]
[[delete-timeout]]
=== 超时

执行删除操作时，分配执行删除的主分片可能会不可用。可能的一些原因是主分片正在恢复或者迁移。
删除操作默认等待一分钟，之后会失败并响应一个错误。`timeout` 参数可以显式指定等待多长时间。
以下是设置 5 分钟的例子：

[source,js]
--------------------------------------------------
DELETE /twitter/_doc/1?timeout=5m
--------------------------------------------------
// CONSOLE
// TEST[setup:twitter]
